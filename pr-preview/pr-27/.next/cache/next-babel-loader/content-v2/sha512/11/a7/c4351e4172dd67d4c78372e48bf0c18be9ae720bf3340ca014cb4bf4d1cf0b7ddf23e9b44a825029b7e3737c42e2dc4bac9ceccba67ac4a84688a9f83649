{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport fs from \"fs\";\nimport Head from \"next/head\";\nimport Markdown from \"../../components/Markdown\";\nimport { Container, Row, Col, Image, H2, Text, Paragraph, H1, Link } from \"@vandebron/windmolen\";\nimport { composePostMetaData } from \"../../utils\";\nexport default function BlogPosts({\n  post\n}) {\n  const {\n    title,\n    description,\n    coverImage,\n    author,\n    formattedDate,\n    imageSource\n  } = post.meta;\n\n  const image = require(`../../public/${coverImage}`);\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, title), __jsx(\"meta\", {\n    name: \"Description\",\n    content: description\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: title\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: description\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `https://www.vandebron.tech/${coverImage}`,\n    key: \"ogimage\"\n  })), __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    col: 12\n  }, __jsx(H2, null, title)), __jsx(Col, {\n    col: 12\n  }, __jsx(Paragraph, null, __jsx(Text, null, `By ${author} on ${formattedDate}`)))), __jsx(Row, null, __jsx(Col, {\n    col: 12\n  }, __jsx(Paragraph, null, __jsx(Image, {\n    aspectRatio: \"2:1\",\n    src: image,\n    srcSet: image.srcSet,\n    alt: title\n  }), imageSource && __jsx(Link, {\n    href: imageSource\n  }, \"Image source\")))), __jsx(Row, {\n    style: {\n      marginBottom: 60\n    }\n  }, __jsx(Col, {\n    col: 12\n  }, __jsx(Markdown, null, post.content)))));\n}\nconst DIRECTORY = \"/public/posts/\"; // This function gets called at build time and generates the list of blog posts\n\nexport async function getStaticPaths() {\n  const files = fs.readdirSync(`${process.cwd()}${DIRECTORY}`); // Get the paths we want to pre-render based on posts\n\n  const paths = files.map(filename => {\n    return {\n      params: {\n        slug: filename.replace(\".md\", \"\")\n      }\n    };\n  }); // We'll pre-render only these paths at build time.\n\n  return {\n    paths,\n    fallback: false\n  }; // redirect other routes to a 404\n}\nexport function getStaticProps({\n  params\n}) {\n  const post = composePostMetaData(DIRECTORY, `${params.slug}.md`);\n  return {\n    props: {\n      post\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}